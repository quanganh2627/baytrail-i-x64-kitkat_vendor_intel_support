#!/bin/bash
# build nand boot recovery image for android
SPIFLAG=0

TEMP=`getopt \
         -o c:r:k:o:p:t:s:b:f:y: \
         --long xen_cmdline:,xen:,cmdline:,ramdisk:,kernel:,output:,type:,sign-with:,bootstub:,vxe-fw:,sps-image:,spi-flag: \
         -n '$0' \
         --  "$@"`

eval set -- "$TEMP"
while true ; do
    echo "+++++ case $1 +++++"
    case "$1" in
        --xen) XEN="$2"; shift 2;;
        --xen_cmdline) XEN_CMDLINE="$2"; shift 2;;
        --cmdline) CMDLINE="$2"; shift 2;;
        --ramdisk) INITRD=$2; shift 2;;
        --vxe-fw) VXEFW=$2; shift 2;;
        --sps-image) SPSIMAGE=$2; shift 2;;
        --kernel) BZIMAGE=$2; shift 2;;
        --output) OUT=$2; shift 2;;
        --bootstub) BOOTSTUB=$2; shift 2;;
        --sign-with) SIGN_WITH=${2,,}; shift 2;;
        --type) TYPE=$2; shift 2;;
        --spi-flag) SPIFLAG=$2; shift 2;;
        --) shift ; break ;;
    esac
done

TARG=`dirname $OUT`
case "$TYPE" in
    mos) IMGNAME="boot";;
    recovery) IMGNAME="recovery";;
    combined) IMGNAME="recovery";;
    fastboot) IMGNAME="fastboot";;
    droidboot) IMGNAME="droidboot";;
    ramdump) IMGNAME="ramdump";;
esac

if [ -z "$IMGNAME" ]; then
    case `basename "$OUT"` in
        boot.img) IMGNAME="boot"; TYPE="mos" ;;
        recovery.img) IMGNAME="recovery" ; TYPE="recovery";;
        droidboot.img) IMGNAME="droidboot" ; TYPE="droidboot";;
        ramdump.img) IMGNAME="ramdump" ; TYPE="ramdump";;
    esac
fi

if [ -z "$IMGNAME" ]; then
    # should be a fatal error
    # we need to allow to call this script from standard AOSP build for recovery generation
    echo "Warning: image type shall be one of: mos,recovery,combined,fastboot,droidboot,ramdump"
    echo "=> Generating RECOVERY image"

    IMGNAME="recovery"
    TYPE="recovery"
fi

if [ -z "$SIGN_WITH" ]; then
    SIGN_WITH="xfstk"
fi

UNSIGNED_OUT=${TARG}/${IMGNAME}.unsigned
CMDLINE_FILE=${TARG}/${IMGNAME}_cmdline
echo $CMDLINE > $CMDLINE_FILE

if [ ! -e ${BZIMAGE} ]; then
    echo "error: bzImage file ${BZIMAGE} does not exist"
    exit 1
fi

if [ ! -e "${INITRD}" ]; then
    echo "error: ramdisk.img file ${INTRD} does not exist"
    exit 1
fi

if [ ! -e "${CMDLINE_FILE}" ]; then
    echo "error: cmdline file ${CMDLINE} does not exist"
    exit 1
fi

if [ -n "$XEN" ]; then
    XEN_CMDLINE_FILE=${TARG}/${IMGNAME}_xen_cmdline
    echo $XEN_CMDLINE > $XEN_CMDLINE_FILE

    if [ ! -e ${VXEFW} ]; then
        echo "error: VXE FW image file ${VXEFW} does not exist"
        exit 1
    fi

    if [ ! -e ${SPSIMAGE} ]; then
        echo "error: SPS image file ${SPSIMAGE} does not exist"
        exit 1
    fi

    if [ ! -e ${XEN} ]; then
        echo "error: xen file ${XEN} does not exist"
        exit 1
    fi
fi

if [ ! -e "${BOOTSTUB}" ]; then
    # should be a fatal error
    # we need to allow to call this script from standard AOSP build
    # some parameters will miss : we workaround
    echo "error: bootstub file ${BOOTSTUB} does not exist"
    BOOTSTUB="${TARG}/bootstub"
    #exit 1
fi

if [ -e "${OUT}" ]; then
    echo "${OUT} exists, remove the old one"
    # do not rm the file : it is already opened in the caller script
    truncate -s 0 ${OUT}
fi

echo "Creating image \`${OUT}'for FSTK stitching..."

rm -f ${UNSIGNED_OUT}

COMMANDLINE="./vendor/intel/support/stitch.py --kernel-cmdline ${CMDLINE_FILE} --bootstub ${BOOTSTUB} --kernel ${BZIMAGE} --ramdisk ${INITRD} --output ${UNSIGNED_OUT}"

if [ -n "$XEN" ]; then
    XEN_ARGS="--xen ${XEN} --xen-cmdline ${XEN_CMDLINE_FILE}"
    DRM_OVER_WIDI_ARGS="--vxe-fw ${VXEFW} --sps-image ${SPSIMAGE}"
    COMMANDLINE="${COMMANDLINE} ${XEN_ARGS} ${DRM_OVER_WIDI_ARGS}"
fi

echo Running ${COMMANDLINE}
${COMMANDLINE}

if [ "0" -ne "$?" ]; then
    echo "error running stitch.py for generating ${UNSIGNED_OUT}"
    exit 1
fi

# stitch binary
TOP=`pwd`
UPPER_TYPE=${TYPE^^}
TMPFILE=`mktemp /tmp/gen-os.tmp.XXX`

GEN_OS=vendor/intel/support/gen_os
# If UNSIGNED_OUT is absolute path, then no need to prefix with TOP
# This happens during OTA generation
if [[ "${UNSIGNED_OUT}" = /* ]]
then
  GEN_OS_CMD="./$GEN_OS --input ${UNSIGNED_OUT} --output ${OUT} --xml ${UPPER_TYPE}_OTA.XML --sign-with $SIGN_WITH"
else
  GEN_OS_CMD="./$GEN_OS --input ${TOP}/${UNSIGNED_OUT} --output ${TOP}/${OUT} --xml ${UPPER_TYPE}_OTA.XML --sign-with $SIGN_WITH"
fi

$GEN_OS_CMD 2>${TMPFILE}
if [ $? -ne 0 ]; then
    echo -e "$GEN_OS_CMD: error\n$(cat ${TMPFILE})" >&2
    rm -f ${TMPFILE}
    exit 1
fi
rm -f ${TMPFILE}

case "$TYPE" in
    combined|fastboot|droidboot)
        # Only generate POS version for these image types.
        GEN_OS_CMD="./$GEN_OS --input ${TOP}/${UNSIGNED_OUT} --output ${TOP}/${OUT}.POS.bin --xml ${UPPER_TYPE}.XML --sign-with $SIGN_WITH"
        $GEN_OS_CMD 2>$TMPFILE
        if [ $? -ne 0 ]; then
            echo -e  "$GEN_OS_CMD: error\n$(cat $TMPFILE)" >&2
            rm -f ${TMPFILE}
            exit 1
        fi
        rm -f ${TMPFILE}
        ;;
esac

# clean up
cd  $TOP
echo "Done."
