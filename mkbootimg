#!/bin/bash
# build nand boot recovery image for android

TEMP=`getopt \
         -o c:r:k:o:p:t: \
         --long cmdline:,ramdisk:,kernel:,output:,product:,type: \
         -n '$0' \
         --  "$@"`

eval set -- "$TEMP"
while true ; do
    echo "+++++ case $1 +++++"
    case "$1" in
        --cmdline) CMDLINE="$2"; shift 2;;
        --ramdisk) INITRD=$2; shift 2;;
        --kernel) BZIMAGE=$2; shift 2;;
        --output) OUT=$2; shift 2;;
        --product) BOARD=$2; shift 2;;
        --type) TYPE=$2; shift 2;;
        --) shift ; break ;;
    esac
done

TARG=`dirname $OUT`
case "$TYPE" in
    mos) IMGNAME="boot";;
    recovery) IMGNAME="recovery";;
    combined) IMGNAME="recovery";;
    fastboot) IMGNAME="fastboot";;
    droidboot) IMGNAME="droidboot";;
esac
if [ -z $IMGNAME ]; then
    echo "error: image type is not one of [mos|recovery]"
    exit 1
fi

UNSIGNED_OUT=${TARG}/${IMGNAME}.unsigned
CMDLINE_FILE=${TARG}/${IMGNAME}_cmdline
echo $CMDLINE > $CMDLINE_FILE
BOOTSTUB=vendor/intel/support/bootstub

if [[   "$BOARD" == "mfld_pr2" \
     || "$BOARD" == "mfld_gi" \
     || "$BOARD" == "mfld_dv10" \
     || "$BOARD" == "redridge" \
     || "$BOARD" == "salitpa" \
     || "$BOARD" == "yukkabeach" \
     || "$BOARD" == "victoriabay" \
     || "$BOARD" == "ctp_pr1" \
     || "$BOARD" == "ctp_nomodem" \
     || "$BOARD" == "mrfl_vp" \
     || "$BOARD" == "mrfl_hvp" \
     || "$BOARD" == "mrfl_sle" \
     || "$BOARD" == "merr_vv" \
   ]]; then
            SILICON=1;
    else
            SILICON=0;
    fi

if [[   "$BOARD" == "mrfl_vp" \
     || "$BOARD" == "mrfl_hvp" \
     || "$BOARD" == "mrfl_sle" \
     || "$BOARD" == "merr_vv"
   ]]; then
            SPI_FLAG=1;
            BOOTSTUB=${BOOTSTUB}_mrfl
    else
            SPI_FLAG=0;
    fi

if [ ! -e ${BZIMAGE} ]; then
    echo "error: bzImage file ${BZIMAGE} does not exist"
    exit 1
fi

if [ ! -e "${INITRD}" ]; then
    echo "error: ramdisk.img file ${INTRD} does not exist"
    exit 1
fi

if [ ! -e "${CMDLINE_FILE}" ]; then
    echo "error: cmdline file ${CMDLINE} does not exist"
    exit 1
fi

if [ ! -e ${BOOTSTUB} ]; then
    echo "error: bootstub file ${BOOTSTUB} does not exist"
    exit 1
fi

if [ -e "${OUT}" ]; then
    echo "${OUT} exists, remove the old one"
    rm -f ${OUT}
fi

echo "Creating image \`${OUT}'for FSTK stitching..."

rm -f ${UNSIGNED_OUT}
./vendor/intel/support/stitch.sh ${CMDLINE_FILE} ${BOOTSTUB} ${BZIMAGE} ${INITRD} ${SPI_FLAG} ${SILICON} ${UNSIGNED_OUT}

if [ "0" -ne "$?" ]; then
    echo "error running stitch.sh for generating ${UNSIGNED_OUT}"
    exit 1
fi
TOP=`pwd`
# stitch binary

UPPER_TYPE=`echo $TYPE|tr '[:lower:]' '[:upper:]'`
TMPFILE=`mktemp /tmp/gen-os.tmp.XXX`
GEN_OS_APP="device/intel/PRIVATE/xfstk-stitcher/gen-os.sh"

GEN_OS_APP_ARGS="--input ${TOP}/${UNSIGNED_OUT} --output ${TOP}/${OUT} --xml ${UPPER_TYPE}_OTA.XML"
./${GEN_OS_APP} ${GEN_OS_APP_ARGS} 2>${TMPFILE}
if [ $? -ne 0 ]; then
	echo -e  "./${GEN_OS_APP} ${GEN_OS_APP_ARGS}: error\n$(cat ${TMPFILE})" >&2
	rm -f ${TMPFILE}
	exit 1
fi
rm -f ${TMPFILE}

# only generate POS version for those types of images
case "$TYPE" in
    combined|fastboot|droidboot)
            GEN_OS_APP_ARGS="--input ${TOP}/${UNSIGNED_OUT} --output ${TOP}/${OUT}.POS.bin --xml ${UPPER_TYPE}.XML"
            ./${GEN_OS_APP} ${GEN_OS_APP_ARGS} 2>${TMPFILE}
			if [ $? -ne 0 ]; then
				echo -e  "./${GEN_OS_APP} ${GEN_OS_APP_ARGS}: error\n$(cat ${TMPFILE})" >&2
				rm -f ${TMPFILE}
				exit 1
			fi
			rm -f ${TMPFILE}
            ;;
esac

# clean up
cd  $TOP
echo "Done."
